{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Belmar_land/src/LanguageContext/LanguageContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport uaJson from '../text-data/ua.json';\nimport enJson from '../text-data/en.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const LanguageProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  let dataText = 'ua';\n  const [language, setLanguage] = useState('en');\n  const [translations, setTranslations] = useState(`${dataText}Json`);\n  useEffect(() => {\n    console.log(uaJson);\n    setTranslations(uaJson);\n    console.log(translations);\n  }, [language]);\n  const changeLanguage = newLanguage => {\n    setTranslations(enJson);\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      translations,\n      changeLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(LanguageProvider, \"oZLepd4jyloWornqEp/FLMBYdVk=\");\n_c = LanguageProvider;\nexport default LanguageContext;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","uaJson","enJson","jsxDEV","_jsxDEV","LanguageContext","LanguageProvider","_ref","_s","children","dataText","language","setLanguage","translations","setTranslations","console","log","changeLanguage","newLanguage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/Belmar_land/src/LanguageContext/LanguageContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport uaJson from '../text-data/ua.json';\nimport enJson from '../text-data/en.json';\nconst LanguageContext = createContext();\n\nexport const LanguageProvider = ({ children }) => {\n    let dataText = 'ua'\n    const [language, setLanguage] = useState('en');\n    const [translations, setTranslations] = useState(`${dataText}Json`);\n\n    useEffect(() => {\n            console.log(uaJson)\n            setTranslations(uaJson);\n            console.log(translations)\n    }, [language]);\n\n    const changeLanguage = (newLanguage) => {\n        setTranslations(enJson);\n    };\n\n    return (\n        <LanguageContext.Provider value={{ language, translations, changeLanguage }}>\n            {children}\n        </LanguageContext.Provider>\n    );\n};\nexport default LanguageContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,MAAMC,eAAe,gBAAGP,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMQ,gBAAgB,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACzC,IAAIG,QAAQ,GAAG,IAAI;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAE,GAAEW,QAAS,MAAK,CAAC;EAEnEV,SAAS,CAAC,MAAM;IACRe,OAAO,CAACC,GAAG,CAACf,MAAM,CAAC;IACnBa,eAAe,CAACb,MAAM,CAAC;IACvBc,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;EACjC,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,MAAMM,cAAc,GAAIC,WAAW,IAAK;IACpCJ,eAAe,CAACZ,MAAM,CAAC;EAC3B,CAAC;EAED,oBACIE,OAAA,CAACC,eAAe,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAET,QAAQ;MAAEE,YAAY;MAAEI;IAAe,CAAE;IAAAR,QAAA,EACvEA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAAChB,EAAA,CApBWF,gBAAgB;AAAAmB,EAAA,GAAhBnB,gBAAgB;AAqB7B,eAAeD,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}